from django.contrib import admin
from django.db.models import Count, Sum
from django.utils.translation import gettext_lazy as _
from .models import Client, Project, Task, Employee, WorkLog


# it's a filter for the projects in Filter
class ProjectListFilter(admin.SimpleListFilter):
    title = _('Project')
    parameter_name = 'project'

    def lookups(self, request, model_admin):
        projects = Project.objects.all()
        return [(project.project_id, project.project_name) for project in projects]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(task__project=self.value())
        return queryset
    
# Create your custom ClientAdmin
class ClientAdmin(admin.ModelAdmin):
    change_list_template = "admin_templates/client_change_list.html"

    def changelist_view(self, request, extra_context=None):
        # Get the default changelist response
        response = super().changelist_view(request, extra_context)
        # Query all clients and annotate a project count
        qs = self.model.objects.all().annotate(project_count=Count('project'))
        
        # Prepare data for the pie chart
        client_names = [client.client_name for client in qs]
        project_counts = [client.project_count for client in qs]

        # Pass your chart data into the template context
        response.context_data['client_names'] = client_names
        response.context_data['project_counts'] = project_counts

        return response

class WorkLogAdmin(admin.ModelAdmin):

    # Using Django's built-in list_filter for related fields:
    
    change_list_template = "admin_templates/worklog_change_list.html"

    list_display = ('employee', 'task', 'get_project', 'date_worked', 'hours_logged')
    search_fields = ('employee__first_name', 'employee__last_name', 'task__task_name')
    list_filter = ('employee', 'task', 'date_worked', 'is_overtime', ProjectListFilter)
    
    list_per_page = 5 # Show 5 worklogs per page

    def get_project(self, obj):
        return obj.task.project.project_name
    
    get_project.short_description = 'Project'

    def changelist_view(self, request, extra_context=None):
        extra_context = extra_context or {}
        response = super().changelist_view(request, extra_context)
        try:
            cl = response.context_data['cl']

        except(AttributeError, KeyError):
            return response   

        queryset = cl.queryset

        task_chart_data = (
           queryset.values('task__task_name')
           .annotate(total_hours=Sum('hours_logged'))
           .order_by('-total_hours')
        )  
       # response = super().changelist_view(request, extra_context)

        tasks = [item['task__task_name'] for item in task_chart_data]
        total_hours = [float(item['total_hours']) for item in task_chart_data]# Cast Decimal to float
        

        # Pie chart data (Total Hours per Employee)
        employee_chart_data = (
            queryset.values('employee__first_name', 'employee__last_name')
            .annotate(total_hours=Sum('hours_logged'))
            .order_by('-total_hours')
        )

        employee_labels = [f"{item['employee__first_name']} {item['employee__last_name']}" for item in employee_chart_data]
        employee_hours = [float(item['total_hours']) for item in employee_chart_data]


        # Inject chart data into context
       
        extra_context['chart_tasks'] = tasks
        extra_context['chart_total_time'] = total_hours
        extra_context['employee_labels'] = employee_labels
        extra_context['employee_hours'] = employee_hours
        
        response.context_data.update(extra_context)
        return response
       
    
class ProjectAdmin(admin.ModelAdmin):
    change_list_template = "admin_templates/project_change_list.html"

    def changelist_view(self, request, extra_context=None):
        response = super().changelist_view(request, extra_context)
        qs = self.model.objects.all()
        # Sum the worklog hours for each project via its tasks (some projects may not have worklogs)
        qs = qs.annotate(total_time=Sum('task__worklog__hours_logged'))
        project_names = [project.project_name for project in qs]
        # Use 0 if no worklog hours are present
        total_hours = [float(project.total_time or 0) for project in qs]

        response.context_data['project_names'] = project_names
        response.context_data['total_hours'] = total_hours
        return response

class EmployeeAdmin(admin.ModelAdmin):

    list_display = ('employee_id','first_name','last_name','email')
 

   
try:
    admin.site.unregister(Project)
except admin.sites.NotRegistered:
    pass
admin.site.register(Project, ProjectAdmin) 

# Unregister if necessary then register our custom admin
try:
    admin.site.unregister(WorkLog)
except admin.sites.NotRegistered:
    pass
admin.site.register(WorkLog, WorkLogAdmin)      

# If Client was already registered, unregister it first:
try:
    admin.site.unregister(Client)
except admin.sites.NotRegistered:
    pass
admin.site.register(Client, ClientAdmin)





# Register other models
#admin.site.register(Project)
admin.site.register(Task)
admin.site.register(Employee,EmployeeAdmin)

#--------------------------------------------------------------------------------#
# base_site.html

"""{% extends "admin/base.html" %}
{% load static i18n %}

{% block title %}Squad Admin{% endblock %}

{% block extrastyle %}
    <link rel="stylesheet" href="{% static 'admin/css/custom_admin.css' %}">
    <script defer src="{% static 'admin/js/theme-toggle.js' %}"></script>
{% endblock %}

{% block branding %}
    <h1 id="site-name">
        <a href="{% url 'admin:index' %}" style="color: white; text-decoration: none;">
            Squad Admin
        </a>
    </h1>
{% endblock %}

{% block nav-global %}
    <div class="custom-navbar">
        <button id="theme-toggle" class="toggle-button">ðŸŒ™ Dark Mode</button>
        <a href="{% url 'admin:index' %}" class="nav-link">Dashboard</a>
        <a href="{% url 'admin:app_list' 'myapp' %}" class="nav-link">Manage Data</a>
        <a href="#" class="nav-link">Settings</a>
    </div>
{% endblock %}
"""
